#version 460

#extension GL_EXT_debug_printf : enable

#define EXPLO_CHUNK_SIZE vec3(16, 16, 16)

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

struct Camera
{
    vec3 position; float _pad;
};

layout(push_constant) uniform PushConstants
{
    Camera camera;
    ivec3 view_start;
    int render_distance;
};

layout(set = 0, binding = 0, rgba32ui) readonly uniform uimage3D baked_world_view;

struct DrawCall
{
    uint index_count;
    uint instance_count;
    uint first_index;
    uint vertex_offset;
    uint first_instance;
};

layout(set = 0, binding = 1) writeonly buffer ChunkDrawList
{
    DrawCall chunk_draw_list[];
};

layout(set = 0, binding = 2) buffer ChunkDrawListIndex
{
    uint chunk_draw_list_idx;
};

bool is_inside_world_view(ivec3 position)
{
    int side = render_distance * 2 + 1;
    return position.x < side && position.y < side && position.z < side;
}

DrawCall read_draw_call_at(ivec3 chunk_pos)
{
    // Apply the circular grid shift here before accessing the actual image data
    int view_side = render_distance * 2 + 1;
    ivec3 view_idx = (chunk_pos + view_start) % view_side;

    uvec4 i0 = imageLoad(baked_world_view, view_idx * ivec3(2, 1, 1));  // We store the data on two adjacent pixels (along X)
    uvec4 i1 = imageLoad(baked_world_view, view_idx * ivec3(2, 1, 1) + ivec3(1, 0, 0));

    DrawCall draw_call;
    draw_call.index_count = i0.r;
    draw_call.instance_count = i0.g;
    draw_call.first_index = i0.b;
    draw_call.vertex_offset = i0.a;
    draw_call.first_instance = i1.r;
    // i1.g == 1
    // i1.b == 2
    // i1.a == 3
    return draw_call;
}

bool test_frustum_aabb(Camera frustum, vec3 aabb_min, vec3 aabb_max)
{
    return true; // TODO implement SAT
}

void main()
{
    ivec3 camera_chunk_pos = ivec3(floor(camera.position / EXPLO_CHUNK_SIZE));
    ivec3 chunk_pos = ivec3(gl_GlobalInvocationID);

    if (!is_inside_world_view(chunk_pos)) return;

    chunk_pos += camera_chunk_pos - render_distance; // Make the chunk position relative to the camera

    vec3 aabb_min = chunk_pos * EXPLO_CHUNK_SIZE;
    vec3 aabb_max = (chunk_pos + 1) * EXPLO_CHUNK_SIZE;

    // If the frustum intersects the chunk's aabb then we add the chunk to the draw list
    if (test_frustum_aabb(camera, aabb_min, aabb_max))
    {
        DrawCall draw_call = read_draw_call_at(ivec3(gl_GlobalInvocationID));
        if (draw_call.index_count > 0) // The draw call is valid (i.e. the chunk isn't empty)
        {
            uint next_idx = atomicAdd(chunk_draw_list_idx, 1);
            chunk_draw_list[next_idx] = draw_call;
        }
    }
}
